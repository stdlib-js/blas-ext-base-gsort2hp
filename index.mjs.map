{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = xget( xbuf, offsetX+(parent*strideX) );\n\t\t\tty = yget( ybuf, offsetY+(parent*strideY) );\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = xget( xbuf, ix );\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = yget( ybuf, iy );\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\txset( xbuf, ix, xget( xbuf, offsetX ) );\n\t\t\tyset( ybuf, iy, yget( ybuf, offsetY ) );\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = xget( xbuf, offsetX+(k*strideX) );\n\t\t\t\tv2 = xget( xbuf, offsetX+(child*strideX) );\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = xget( xbuf, offsetX+(child*strideX) );\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\txset( xbuf, offsetX+(j*strideX), v1 );\n\t\t\t\tyset( ybuf, offsetY+(j*strideY), yget( ybuf, offsetY+(child*strideY) ) ); // eslint-disable-line max-len\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\txset( xbuf, offsetX+(j*strideX), tx );\n\t\tyset( ybuf, offsetY+(j*strideY), ty );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, order, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* @module @stdlib/blas-ext-base-gsort2hp\n*\n* @example\n* import gsort2hp from '@stdlib/blas-ext-base-gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2hp from '@stdlib/blas-ext-base-gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["gsort2hp","N","order","x","strideX","offsetX","y","strideY","offsetY","parent","child","v1","v2","tx","ty","ix","iy","ox","oy","n","j","k","arraylike2object","accessorProtocol","xbuf","ybuf","xget","yget","xset","yset","data","accessors","floor","isnan","isPositiveZero","ndarray","stride2offset","setReadOnly","main"],"mappings":"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"}